[["differential-expression-de-analysis-and-cell-type-annotation.html", "Chapter 6 Differential Expression (DE) analysis and cell type annotation 6.1 DE analysis 6.2 Cell type annotation", " Chapter 6 Differential Expression (DE) analysis and cell type annotation Continue from checkpoint… pbmc&lt;-readRDS(&quot;../pbmc_data/pbmc_clust.rds&quot;) 6.1 DE analysis DE analysis identify gene markers that are differentially expressed in one cell type vs all others. You can perform DE for one cell type using FindMarkers, or run for all clusters using FindAllMarkers. DefaultAssay(pbmc) &lt;- &quot;RNA&quot; # cluster 0 vs all others # this can take several minutes cluster0.markers &lt;- FindMarkers(object = pbmc, ident.1 = 0, min.pct = 0.1) print(x = head(x = cluster0.markers, n = 5)) ## p_val avg_log2FC pct.1 pct.2 p_val_adj ## LRMDA 0 3.118612 0.971 0.177 0 ## PLXDC2 0 3.284448 0.993 0.204 0 ## SLC8A1 0 2.868579 0.974 0.193 0 ## CSF3R 0 3.534311 0.893 0.128 0 ## DMXL2 0 3.023065 0.921 0.179 0 In the code below, we can also use FindAllMarkers function to automate this process for all clusters. This compares 0 with all other clusters, 1 with all other clusters, etc. Note here that we have specified that min.pct =0.25 , as we want the log(fold-change) threshold for a gene to be at least 0.25 to be identified as significant. Then we select the top 3 markers for each cluster, based on log(fold-changes, but it will take long time to finish. DefaultAssay(pbmc) &lt;- &quot;RNA&quot; # find markers for every cluster compared to all remaining cells, report only the positive ones # FindAllMarkers can take long time to run allmarkers &lt;-FindAllMarkers(pbmc, only.pos = FALSE, min.pct = 0.25, logfc.threshold = 0.25,assay=&quot;RNA&quot;,slot=&quot;scale.data&quot;) library(dplyr) allmarkers_grouped&lt;- allmarkers %&gt;% group_by(cluster) %&gt;% slice_max(n = 1, order_by = avg_log2FC) write.table(as.data.frame(allmarkers),file=&quot;../pbmc_data/DE_markers.txt&quot;,sep=&quot;\\t&quot;,row.names = F,col.names = T) Visualizing DE markers. allmarkers&lt;-read.table(&quot;../pbmc_data/DE_markers.txt&quot;,header=T) top3_log2FC &lt;- allmarkers %&gt;% group_by(cluster) %&gt;% top_n(3, avg_log2FC) head(top3_log2FC) ## # A tibble: 6 × 7 ## # Groups: cluster [2] ## p_val avg_log2FC pct.1 pct.2 p_val_adj cluster gene ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 6.83e- 15 3.46 0.275 0.04 2.50e- 10 1 ANKRD55 ## 2 1.01e- 14 2.59 0.499 0.126 3.69e- 10 1 AC139720.1 ## 3 1.76e- 6 2.91 0.444 0.096 6.46e- 2 1 TSHZ2 ## 4 4.20e-156 2.22 0.895 0.372 1.54e-151 5 ITGB1 ## 5 6.84e- 13 2.26 0.484 0.123 2.50e- 8 5 GATA3 ## 6 1.47e- 12 2.15 0.461 0.133 5.40e- 8 5 MFHAS1 # plot features&lt;-unique(top3_log2FC$gene) VlnPlot(pbmc, features = c(&quot;TSHZ2&quot;,&quot;LEF1&quot;),slot = &quot;counts&quot;, log = TRUE, pt.size=0) Figure 6.1: Violin plot for gene TSHZ2 and LEF1 FeaturePlot(pbmc, features = c(&quot;LEF1&quot;, &quot;FHIT&quot;, &quot;LTB&quot;, &quot;NELL2&quot;, &quot;AFF3&quot;, &quot;BANK1&quot;, &quot;VCAN&quot;, &quot;FCGR3A&quot;, &quot;TCF4&quot;)) Figure 6.2: Feature expression plot DoHeatmap(object = pbmc, features = top3_log2FC$gene)+ NoLegend() Figure 6.3: Heatmap of top 3 DE markers for each cluster 6.2 Cell type annotation We annotate the clusters below. Note that you could also annotate the dataset using supervised mapping pipelines or automated web tool, Azimuth. To annotate cell types in the dataset we can transfer cell labels from an existing PBMC reference dataset using tools in the Seurat package. See the Seurat reference mapping vignette for more information. We’ll use an annotated PBMC reference dataset from Hao et al. (2020), available for download here: https://atlas.fredhutch.org/data/nygc/multimodal/pbmc_multimodal.h5seurat Note that the SeuratDisk package is required to load the reference dataset. # download reference annotation wget https://atlas.fredhutch.org/data/nygc/multimodal/pbmc_multimodal.h5seurat library(SeuratDisk) # load PBMC reference reference &lt;- LoadH5Seurat(&quot;../pbmc_data/pbmc_multimodal.h5seurat&quot;) DefaultAssay(pbmc) &lt;- &quot;SCT&quot; # transfer cell type labels from reference to query transfer_anchors &lt;- FindTransferAnchors( reference = reference, query = pbmc, reference.reduction=&quot;spca&quot;, normalization.method = &quot;SCT&quot;, dims = 1:50 ) MapQuery() is a wrapper around three functions: TransferData(), IntegrateEmbeddings(), and ProjectUMAP(). TransferData() is used to transfer cell type labels and impute the ADT values. IntegrateEmbeddings() and ProjectUMAP() are used to project the query data onto the UMAP structure of the reference. # MapQuery() is a wrapper around three functions: TransferData(), IntegrateEmbeddings(), and ProjectUMAP() pbmc &lt;- MapQuery( anchorset = transfer_anchors, query = pbmc, reference = reference, refdata = list( celltype = &quot;celltype.l2&quot;, predicted_ADT = &quot;ADT&quot; ), reference.reduction = &quot;spca&quot;, # reference has different types of reduction performed, pca, spca, umap ,etc. reduction.model = &quot;wnn.umap&quot;, transferdata.args=list(), integrateembeddings.args = list(), projectumap.args = list() ) # plot on reference data space p1&lt;-DimPlot(pbmc, reduction = &quot;ref.umap&quot;, group.by = &quot;predicted.celltype.l2&quot;, label = TRUE, label.size = 3 ,repel = TRUE) # plot on wnn space p2&lt;-DimPlot(pbmc, reduction = &quot;wnn.umap&quot;, group.by = &quot;predicted.celltype.l2&quot;, label = TRUE, label.size = 3 ,repel = TRUE) p1 + p2 &amp; NoLegend() &amp; theme(plot.title = element_text(hjust = 0.5)) Figure 6.4: Clusters for annotated cell types saveRDS(pbmc,file=&quot;pbmc_anno.rds&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
