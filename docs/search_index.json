[["seuratqc.html", "Chapter 3 Load data and create Seurat objects", " Chapter 3 Load data and create Seurat objects We first load all required libraries in this tutorial. library(Seurat) ## Loading required package: SeuratObject ## Loading required package: sp ## ## Attaching package: &#39;SeuratObject&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, t library(SeuratData) ## ── Installed datasets ──────────────────────────────── SeuratData v0.2.2.9001 ── ## ✔ pbmcMultiome 0.1.4 ## ────────────────────────────────────── Key ───────────────────────────────────── ## ✔ Dataset loaded successfully ## ❯ Dataset built with a newer version of Seurat than installed ## ❓ Unknown version of Seurat installed library(Signac) library(&#39;BSgenome.Hsapiens.UCSC.hg38&#39;) ## Loading required package: GenomeInfoDb ## Loading required package: BiocGenerics ## ## Attaching package: &#39;BiocGenerics&#39; ## The following object is masked from &#39;package:SeuratObject&#39;: ## ## intersect ## The following objects are masked from &#39;package:stats&#39;: ## ## IQR, mad, sd, var, xtabs ## The following objects are masked from &#39;package:base&#39;: ## ## anyDuplicated, aperm, append, as.data.frame, basename, cbind, ## colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, ## get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, ## match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, ## Position, rank, rbind, Reduce, rownames, sapply, setdiff, table, ## tapply, union, unique, unsplit, which.max, which.min ## Loading required package: S4Vectors ## Loading required package: stats4 ## ## Attaching package: &#39;S4Vectors&#39; ## The following object is masked from &#39;package:utils&#39;: ## ## findMatches ## The following objects are masked from &#39;package:base&#39;: ## ## expand.grid, I, unname ## Loading required package: IRanges ## ## Attaching package: &#39;IRanges&#39; ## The following object is masked from &#39;package:sp&#39;: ## ## %over% ## Loading required package: BSgenome ## Loading required package: GenomicRanges ## Loading required package: Biostrings ## Loading required package: XVector ## ## Attaching package: &#39;Biostrings&#39; ## The following object is masked from &#39;package:base&#39;: ## ## strsplit ## Loading required package: BiocIO ## Loading required package: rtracklayer ## ## Attaching package: &#39;rtracklayer&#39; ## The following object is masked from &#39;package:BiocIO&#39;: ## ## FileForFormat library(&#39;EnsDb.Hsapiens.v86&#39;) ## Loading required package: ensembldb ## Loading required package: GenomicFeatures ## Loading required package: AnnotationDbi ## Loading required package: Biobase ## Welcome to Bioconductor ## ## Vignettes contain introductory material; view with ## &#39;browseVignettes()&#39;. To cite Bioconductor, see ## &#39;citation(&quot;Biobase&quot;)&#39;, and for packages &#39;citation(&quot;pkgname&quot;)&#39;. ## Loading required package: AnnotationFilter ## ## Attaching package: &#39;ensembldb&#39; ## The following object is masked from &#39;package:stats&#39;: ## ## filter library(ggplot2) library(cowplot) The PBMC multiome data was built in the SeuratData package and was stored in a SeuratObject already, so we can download the data and directly start analyzing. ## Warning: The following packages are already installed and will not be ## reinstalled: pbmcMultiome If you have your own output files (.csv or .h5) from CellRanger ARC, you need to read the count matrix into R and construct Seurat Objects first. Below is an examples for constructing SeuratObject. # load both modalities pbmc.rna &lt;- LoadData(&quot;pbmcMultiome&quot;, &quot;pbmc.rna&quot;) pbmc.atac &lt;- LoadData(&quot;pbmcMultiome&quot;, &quot;pbmc.atac&quot;) pbmc.rna[[&quot;RNA&quot;]] &lt;- as(pbmc.rna[[&quot;RNA&quot;]], Class = &quot;Assay5&quot;) # repeat QC steps performed in the WNN vignette pbmc.rna &lt;- subset(pbmc.rna, seurat_annotations != &quot;filtered&quot;) pbmc.atac &lt;- subset(pbmc.atac, seurat_annotations != &quot;filtered&quot;) You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter ??. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter 4. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 3.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 3.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 3.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 3.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2024) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/. ———. 2024. Bookdown: Authoring Books and Technical Documents with r Markdown. https://github.com/rstudio/bookdown. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
