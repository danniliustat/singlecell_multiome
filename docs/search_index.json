[["seuratqc.html", "Chapter 3 Obtain data and perform QC using Seurat 3.1 Download data 3.2 Load data in R and construct Seurat object 3.3 Perform quality control using both assays", " Chapter 3 Obtain data and perform QC using Seurat 3.1 Download data The PBMC multiome dataset is available from 10x genomics. The website contains output files from CelL Ranger ARC. Please go to the above website and make sure you download the following files to your data folder: Filtered feature barcode matrix (HDF5) ATAC Per fragment information file (TSV.GZ) ATAC Per fragment information index (TSV.GZ index) In Terminal window: cd ~/pbmc_data # download data wget https://cf.10xgenomics.com/samples/cell-arc/1.0.0/pbmc_granulocyte_sorted_10k/pbmc_granulocyte_sorted_10k_filtered_feature_bc_matrix.h5 wget https://cf.10xgenomics.com/samples/cell-arc/1.0.0/pbmc_granulocyte_sorted_10k/pbmc_granulocyte_sorted_10k_atac_fragments.tsv.gz wget https://cf.10xgenomics.com/samples/cell-arc/1.0.0/pbmc_granulocyte_sorted_10k/pbmc_granulocyte_sorted_10k_atac_fragments.tsv.gz.tbi # check files ls 3.2 Load data in R and construct Seurat object For the following processing and analysis steps, we are going to use Seurat and its sister package Signac. Seurat is a popular package in R that provides users with well-curated functions and workflows. Seurat was first developed for the clustering of scRNA-seq data, but with continuing updates in the last few years, this package has become a popular tool for QC, analysis, and exploration of scRNA-seq data as well. For more information on Seurat, see the Seurat website from the Satija Lab, which has very nice documentation and links to the Satija Lab publications as well as detailed tutorials and vignettes. In this notebook, we will use the most recent version of Seurat, version 5. We first load all required libraries in this tutorial. library(Seurat) library(SeuratData) library(Signac) library(BSgenome.Hsapiens.UCSC.hg38) library(EnsDb.Hsapiens.v86) library(ggplot2) library(cowplot) library(hdf5r) library(dplyr) library(patchwork) library(clustree) Also set working directory to the folder where you saved your downloaded datasets. # check current working directory getwd() # set working directory setwd(&quot;/dfs6/pub/your_user_name&quot;) getwd() # check again Next, we will read in the .h5 file into R and construct Seurat Object with both scRNA-seq and scATAC-seq assays. # the 10x hdf5 file contains both data types. inputdata.10x &lt;- Read10X_h5(&quot;pbmc_granulocyte_sorted_10k_filtered_feature_bc_matrix.h5&quot;) # extract RNA and ATAC data rna_counts &lt;- inputdata.10x$`Gene Expression` atac_counts &lt;- inputdata.10x$Peaks ## if reading files from &quot;filtered_feature_bc_matrix&quot; # inputdata.10x &lt;- Read10X(data.dir = &quot;filtered_feature_bc_matrix&quot;) # Create Seurat object pbmc &lt;- CreateSeuratObject(counts = rna_counts,project=&quot;pbmc&quot;) # Now add in the ATAC-seq data # we&#39;ll only use peaks in standard chromosomes grange.counts &lt;- StringToGRanges(rownames(atac_counts), sep = c(&quot;:&quot;, &quot;-&quot;)) grange.use &lt;- seqnames(grange.counts) %in% standardChromosomes(grange.counts) atac_counts &lt;- atac_counts[as.vector(grange.use), ] annotations &lt;- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86) seqlevelsStyle(annotations) &lt;- &#39;UCSC&#39; genome(annotations) &lt;- &quot;hg38&quot; frag.file &lt;- &quot;pbmc_granulocyte_sorted_10k_atac_fragments.tsv.gz&quot; chrom_assay &lt;- CreateChromatinAssay( counts = atac_counts, sep = c(&quot;:&quot;, &quot;-&quot;), genome = &#39;hg38&#39;, fragments = frag.file, min.cells = 10, annotation = annotations ) pbmc[[&quot;ATAC&quot;]] &lt;- chrom_assay # check data pbmc Add something about seurat object structure Explore Seurat Objects using @ or $ # check available assays in data pbmc@active.assay #check a single assay pbmc[[&quot;RNA&quot;]] pbmc[[&quot;ATAC&quot;]] # check elements within each assay pbmc[[&quot;RNA&quot;]]$counts # check metadata pbmc@meta.data Saving data periodically to preserve Seurat results. Output data can be large. 3.3 Perform quality control using both assays Using DefaultAssay() to specify the assay you want to work on. # calculate percentage of mitochondrial genes in each cell DefaultAssay(pbmc) &lt;- &quot;RNA&quot; pbmc[[&quot;percent.mt&quot;]] &lt;- PercentageFeatureSet(pbmc, pattern = &quot;^MT-&quot;) DefaultAssay(pbmc) &lt;- &quot;ATAC&quot; pbmc &lt;- NucleosomeSignal(pbmc) pbmc &lt;- TSSEnrichment(pbmc) DensityScatter(pbmc, x = &#39;nCount_ATAC&#39;, y = &#39;TSS.enrichment&#39;, log_x = TRUE, quantiles = TRUE) # generate violin plot VlnPlot(pbmc, features = c( &quot;nCount_RNA&quot;, &quot;nFeature_RNA&quot;, &quot;percent.mt&quot;), ncol = 3, log = TRUE, pt.size = 0) + NoLegend() VlnPlot(pbmc, features = c(&quot;nCount_ATAC&quot;, &quot;TSS.enrichment&quot;, &quot;nucleosome_signal&quot;), ncol = 3, log = TRUE, pt.size = 0) + NoLegend() # change pt.size to show scatter p # show plot VlnPlot(pbmc, features = c( &quot;nCount_RNA&quot;, &quot;nFeature_RNA&quot;, &quot;percent.mt&quot;), ncol = 3, log = TRUE, pt.size = 0) + NoLegend() Figure 3.1: Voilin plot for QC VlnPlot(pbmc, features = c(&quot;nCount_ATAC&quot;, &quot;TSS.enrichment&quot;, &quot;nucleosome_signal&quot;), ncol = 3, log = TRUE, pt.size = 0) + NoLegend() Figure 3.2: Voilin plot for QC # play with different filtering cutoffs to see how number of cells change pbmc &lt;- subset( x = pbmc, subset = nCount_ATAC &lt; 7e4 &amp; nCount_ATAC &gt; 5e3 &amp; nCount_RNA &lt; 25000 &amp; nCount_RNA &gt; 1000 &amp; percent.mt &lt; 25 &amp; nucleosome_signal &lt; 2 &amp; TSS.enrichment &gt; 1 ) pbmc Saving data periodically to preserve Seurat results. Output data can be large. saveRDS(pbmc,file=&quot;pbmc_qc.rds&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
